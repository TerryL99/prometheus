// Copyright 2013 The Prometheus Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rules

import (
	// "context"
	// "html/template"
	"testing"
	"time"

	"github.com/stretchr/testify/require"

	"github.com/prometheus/prometheus/model/labels"
	// "github.com/prometheus/prometheus/model/timestamp"
	"github.com/prometheus/prometheus/promql"
	"github.com/prometheus/prometheus/promql/parser"
	// "github.com/prometheus/prometheus/util/teststorage"
)

/*
func TestRuleEval(t *testing.T) {
	t.Log("Hi! in TestRuleEval!")	

	storage := teststorage.New(t)
	defer storage.Close()

	opts := promql.EngineOpts{
		Logger:     nil,
		Reg:        nil,
		MaxSamples: 10,
		Timeout:    10 * time.Second,
	}

	engine := promql.NewEngine(opts)
	ctx, cancelCtx := context.WithCancel(context.Background())
	defer cancelCtx()

	now := time.Now()

	suite := []struct {
		name   string
		expr   parser.Expr
		labels labels.Labels
		result promql.Vector
		err    string
	}{
		{
			name:   "nolabels",
			expr:   &parser.NumberLiteral{Val: 1},
			labels: labels.Labels{},
			result: promql.Vector{promql.Sample{
				Metric: labels.FromStrings("__name__", "nolabels"),
				Point:  promql.Point{V: 1, T: timestamp.FromTime(now)},
			}},
		},
		{
			name:   "labels",
			expr:   &parser.NumberLiteral{Val: 1},
			labels: labels.FromStrings("foo", "bar"),
			result: promql.Vector{promql.Sample{
				Metric: labels.FromStrings("__name__", "labels", "foo", "bar"),
				Point:  promql.Point{V: 1, T: timestamp.FromTime(now)},
			}},
		},
	}

	for _, test := range suite {
		rule := NewRecordingRule(test.name, test.expr, test.labels)
		start_time := time.Now()
		result, err := rule.Eval(ctx, now, EngineQueryFunc(engine, storage), nil, 0)
		elapsed := time.Since(start_time)
		t.Log("time used is:", elapsed)
		if test.err == "" {
			require.NoError(t, err)
		} else {
			require.Equal(t, test.err, err.Error())
		}
		require.Equal(t, test.result, result)
	}
}
*/

func TestRuleEvalPressure(t *testing.T) {
	t.Log("Hi! in TestRuleEvalPressure!")	

	suite, err := promql.NewTest(t, `
		load 1s
			http_requests{job="app-server", instance="0", group="canary", severity="overwrite-me"}	75 85  95 105 105  95  85 9.633972697401838 41.0503878512922 29.825144688261485 68.90613389908327 21.164324274502032 29.919422592221522 19.543417041374145 62.32121175094638 58.58154602280445 63.76432346607237 32.37423007968674 0.8988091006342236 25.883536797270303 34.997499030123805 94.69964930361819 69.42389987137109 46.96367768168894 73.76432031129599 16.991862468016585 53.45223282359496 10.499287415683877 34.822318100581306 27.81541806352702 68.13818943071863 94.17172213229328 98.64553266029526 3.5630634150670137 41.40059031876532 83.98915755532202 4.095762791571433 84.51570882653776 79.32611242746763 41.66379333022372 43.07360501421892 44.54556953592561 49.37026456525211 4.781602611054447 95.7448198249514 36.72768841497335 18.724700218185365 0.10761865105534119 24.287302299708447 25.43868013787106 43.494588828175765 41.21871962419523 57.60284647616544 85.92730523147561 19.844053756063197 66.18012030144253 85.89098332568864 60.476305652348536 3.927495958249627 21.39433672398371 56.31192771248934 76.46273720931576 40.04249076440719 43.87503717729654 87.04598195070521 9.209543890738114 82.57024542584442 18.645282382965746 29.773594612629097 26.811931997853357 5.754418813001038 4.407990541322004 77.49620249569234 30.15781664596825 58.4330881089185 23.394103062950535 4.498724900720818 96.3600074150093 99.81780531530524 53.240604254406875 45.722521115219 93.77870873559017 73.20959074861004 65.5704503535907 32.237590606418486 35.60288607203073 59.85447373427856 29.657847325204976 24.358314529057314 9.501055481952381 77.53394886727136 71.23238094927414 63.005259838637464 53.37294002786659 31.619185311675125 71.71653178618452 45.098262261850294 36.21094723304654 48.07706731874419 84.90645601909243 44.653569004698646 90.30780738077708 11.651690861334297 39.030997828313005 56.29330456691234 38.33402947349922 92.35852527321076 119.34639596962182 660.3227757237034 515.6888098250165 22.01915257371534 665.8982107665574 507.18038473936247 863.4901574740943 826.9481728169235 946.4084738562776 736.2615496391669 544.0676614073523 408.5706783739091 929.6509603326284 747.0336077634757 445.39500578682964 30.104082957079335 846.8066063806851 79.44395528503412 911.398118797185 19.79373130923834 708.2313585399477 947.0673194028802 384.5715311841067 329.90892645450174 688.1802267598393 335.98209799211145 866.5893366243571 834.4193926266086 542.4004541737214 654.1237279599915 1.4637917205246875 899.9992281011163 945.0746007280288 288.95658654650083 838.8184336350537 654.0873348704445 680.0108039726365 833.7841235394144 787.5146677247379 514.6559067461627 874.0304618328447 195.06360687629498 609.6144238158308 533.6491055678772 210.6478672000731 63.9555659030705 830.1548655797374 670.9739999948113 336.6041949068802 760.8933666897026 506.8254037919978 467.36897230385244 805.7288009156894 379.09802499570367 871.7282364982603 438.5245930632216 792.2651991673312 156.3779813181556 924.3332295499105 431.6397678505351 57.50048613354053 267.2981572346773 360.4843305737707 975.5873736455964 201.75328436462715 453.32186891359305 860.738822073116 176.4775454014501 364.00089560071933 371.2679536008262 954.208857086728 642.2929227022462 860.2982525432433 62.07624277172563 27.280975992188594 506.86552897520164 963.5206803052353 655.6559753958753 913.4842164147861 792.9538584661656 368.77977904155614 705.7490793824517 145.93534090591487 149.13982774651535 926.544313985821 505.7912995774754 238.36085604124858 950.717524456068 868.6795457198392 857.3402361072945 217.2818093472808 247.5493500668544 48.66072911734931 521.1421661250829 624.1863871395403 78.97169517988655 512.2134891571691 960.1957020160768 411.7101070154479 226.52935412784382
			http_requests{job="app-server", instance="1", group="canary", severity="overwrite-me"}	80 90 100 110 120 130 140 9.633972697401838 41.0503878512922 29.825144688261485 68.90613389908327 21.164324274502032 29.919422592221522 19.543417041374145 62.32121175094638 58.58154602280445 63.76432346607237 32.37423007968674 0.8988091006342236 25.883536797270303 34.997499030123805 94.69964930361819 69.42389987137109 46.96367768168894 73.76432031129599 16.991862468016585 53.45223282359496 10.499287415683877 34.822318100581306 27.81541806352702 68.13818943071863 94.17172213229328 98.64553266029526 3.5630634150670137 41.40059031876532 83.98915755532202 4.095762791571433 84.51570882653776 79.32611242746763 41.66379333022372 43.07360501421892 44.54556953592561 49.37026456525211 4.781602611054447 95.7448198249514 36.72768841497335 18.724700218185365 0.10761865105534119 24.287302299708447 25.43868013787106 43.494588828175765 41.21871962419523 57.60284647616544 85.92730523147561 19.844053756063197 66.18012030144253 85.89098332568864 60.476305652348536 3.927495958249627 21.39433672398371 56.31192771248934 76.46273720931576 40.04249076440719 43.87503717729654 87.04598195070521 9.209543890738114 82.57024542584442 18.645282382965746 29.773594612629097 26.811931997853357 5.754418813001038 4.407990541322004 77.49620249569234 30.15781664596825 58.4330881089185 23.394103062950535 4.498724900720818 96.3600074150093 99.81780531530524 53.240604254406875 45.722521115219 93.77870873559017 73.20959074861004 65.5704503535907 32.237590606418486 35.60288607203073 59.85447373427856 29.657847325204976 24.358314529057314 9.501055481952381 77.53394886727136 71.23238094927414 63.005259838637464 53.37294002786659 31.619185311675125 71.71653178618452 45.098262261850294 36.21094723304654 48.07706731874419 84.90645601909243 44.653569004698646 90.30780738077708 11.651690861334297 39.030997828313005 56.29330456691234 38.33402947349922 92.35852527321076 119.34639596962182 660.3227757237034 515.6888098250165 22.01915257371534 665.8982107665574 507.18038473936247 863.4901574740943 826.9481728169235 946.4084738562776 736.2615496391669 544.0676614073523 408.5706783739091 929.6509603326284 747.0336077634757 445.39500578682964 30.104082957079335 846.8066063806851 79.44395528503412 911.398118797185 19.79373130923834 708.2313585399477 947.0673194028802 384.5715311841067 329.90892645450174 688.1802267598393 335.98209799211145 866.5893366243571 834.4193926266086 542.4004541737214 654.1237279599915 1.4637917205246875 899.9992281011163 945.0746007280288 288.95658654650083 838.8184336350537 654.0873348704445 680.0108039726365 833.7841235394144 787.5146677247379 514.6559067461627 874.0304618328447 195.06360687629498 609.6144238158308 533.6491055678772 210.6478672000731 63.9555659030705 830.1548655797374 670.9739999948113 336.6041949068802 760.8933666897026 506.8254037919978 467.36897230385244 805.7288009156894 379.09802499570367 871.7282364982603 438.5245930632216 792.2651991673312 156.3779813181556 924.3332295499105 431.6397678505351 57.50048613354053 267.2981572346773 360.4843305737707 975.5873736455964 201.75328436462715 453.32186891359305 860.738822073116 176.4775454014501 364.00089560071933 371.2679536008262 954.208857086728 642.2929227022462 860.2982525432433 62.07624277172563 27.280975992188594 506.86552897520164 963.5206803052353 655.6559753958753 913.4842164147861 792.9538584661656 368.77977904155614 705.7490793824517 145.93534090591487 149.13982774651535 926.544313985821 505.7912995774754 238.36085604124858 950.717524456068 868.6795457198392 857.3402361072945 217.2818093472808 247.5493500668544 48.66072911734931 521.1421661250829 624.1863871395403 78.97169517988655 512.2134891571691 960.1957020160768 411.7101070154479 226.52935412784382
			http_requests{job="app-server", instance="0", group="canary", severity="overwrite-me"}	75 85  95 105 105  95  85 9.633972697401838 41.0503878512922 29.825144688261485 68.90613389908327 21.164324274502032 29.919422592221522 19.543417041374145 62.32121175094638 58.58154602280445 63.76432346607237 32.37423007968674 0.8988091006342236 25.883536797270303 34.997499030123805 94.69964930361819 69.42389987137109 46.96367768168894 73.76432031129599 16.991862468016585 53.45223282359496 10.499287415683877 34.822318100581306 27.81541806352702 68.13818943071863 94.17172213229328 98.64553266029526 3.5630634150670137 41.40059031876532 83.98915755532202 4.095762791571433 84.51570882653776 79.32611242746763 41.66379333022372 43.07360501421892 44.54556953592561 49.37026456525211 4.781602611054447 95.7448198249514 36.72768841497335 18.724700218185365 0.10761865105534119 24.287302299708447 25.43868013787106 43.494588828175765 41.21871962419523 57.60284647616544 85.92730523147561 19.844053756063197 66.18012030144253 85.89098332568864 60.476305652348536 3.927495958249627 21.39433672398371 56.31192771248934 76.46273720931576 40.04249076440719 43.87503717729654 87.04598195070521 9.209543890738114 82.57024542584442 18.645282382965746 29.773594612629097 26.811931997853357 5.754418813001038 4.407990541322004 77.49620249569234 30.15781664596825 58.4330881089185 23.394103062950535 4.498724900720818 96.3600074150093 99.81780531530524 53.240604254406875 45.722521115219 93.77870873559017 73.20959074861004 65.5704503535907 32.237590606418486 35.60288607203073 59.85447373427856 29.657847325204976 24.358314529057314 9.501055481952381 77.53394886727136 71.23238094927414 63.005259838637464 53.37294002786659 31.619185311675125 71.71653178618452 45.098262261850294 36.21094723304654 48.07706731874419 84.90645601909243 44.653569004698646 90.30780738077708 11.651690861334297 39.030997828313005 56.29330456691234 38.33402947349922 92.35852527321076 119.34639596962182 660.3227757237034 515.6888098250165 22.01915257371534 665.8982107665574 507.18038473936247 863.4901574740943 826.9481728169235 946.4084738562776 736.2615496391669 544.0676614073523 408.5706783739091 929.6509603326284 747.0336077634757 445.39500578682964 30.104082957079335 846.8066063806851 79.44395528503412 911.398118797185 19.79373130923834 708.2313585399477 947.0673194028802 384.5715311841067 329.90892645450174 688.1802267598393 335.98209799211145 866.5893366243571 834.4193926266086 542.4004541737214 654.1237279599915 1.4637917205246875 899.9992281011163 945.0746007280288 288.95658654650083 838.8184336350537 654.0873348704445 680.0108039726365 833.7841235394144 787.5146677247379 514.6559067461627 874.0304618328447 195.06360687629498 609.6144238158308 533.6491055678772 210.6478672000731 63.9555659030705 830.1548655797374 670.9739999948113 336.6041949068802 760.8933666897026 506.8254037919978 467.36897230385244 805.7288009156894 379.09802499570367 871.7282364982603 438.5245930632216 792.2651991673312 156.3779813181556 924.3332295499105 431.6397678505351 57.50048613354053 267.2981572346773 360.4843305737707 975.5873736455964 201.75328436462715 453.32186891359305 860.738822073116 176.4775454014501 364.00089560071933 371.2679536008262 954.208857086728 642.2929227022462 860.2982525432433 62.07624277172563 27.280975992188594 506.86552897520164 963.5206803052353 655.6559753958753 913.4842164147861 792.9538584661656 368.77977904155614 705.7490793824517 145.93534090591487 149.13982774651535 926.544313985821 505.7912995774754 238.36085604124858 950.717524456068 868.6795457198392 857.3402361072945 217.2818093472808 247.5493500668544 48.66072911734931 521.1421661250829 624.1863871395403 78.97169517988655 512.2134891571691 960.1957020160768 411.7101070154479 226.52935412784382
			http_requests{job="app-server", instance="1", group="canary", severity="overwrite-me"}	80 90 100 110 120 130 140 9.633972697401838 41.0503878512922 29.825144688261485 68.90613389908327 21.164324274502032 29.919422592221522 19.543417041374145 62.32121175094638 58.58154602280445 63.76432346607237 32.37423007968674 0.8988091006342236 25.883536797270303 34.997499030123805 94.69964930361819 69.42389987137109 46.96367768168894 73.76432031129599 16.991862468016585 53.45223282359496 10.499287415683877 34.822318100581306 27.81541806352702 68.13818943071863 94.17172213229328 98.64553266029526 3.5630634150670137 41.40059031876532 83.98915755532202 4.095762791571433 84.51570882653776 79.32611242746763 41.66379333022372 43.07360501421892 44.54556953592561 49.37026456525211 4.781602611054447 95.7448198249514 36.72768841497335 18.724700218185365 0.10761865105534119 24.287302299708447 25.43868013787106 43.494588828175765 41.21871962419523 57.60284647616544 85.92730523147561 19.844053756063197 66.18012030144253 85.89098332568864 60.476305652348536 3.927495958249627 21.39433672398371 56.31192771248934 76.46273720931576 40.04249076440719 43.87503717729654 87.04598195070521 9.209543890738114 82.57024542584442 18.645282382965746 29.773594612629097 26.811931997853357 5.754418813001038 4.407990541322004 77.49620249569234 30.15781664596825 58.4330881089185 23.394103062950535 4.498724900720818 96.3600074150093 99.81780531530524 53.240604254406875 45.722521115219 93.77870873559017 73.20959074861004 65.5704503535907 32.237590606418486 35.60288607203073 59.85447373427856 29.657847325204976 24.358314529057314 9.501055481952381 77.53394886727136 71.23238094927414 63.005259838637464 53.37294002786659 31.619185311675125 71.71653178618452 45.098262261850294 36.21094723304654 48.07706731874419 84.90645601909243 44.653569004698646 90.30780738077708 11.651690861334297 39.030997828313005 56.29330456691234 38.33402947349922 92.35852527321076 119.34639596962182 660.3227757237034 515.6888098250165 22.01915257371534 665.8982107665574 507.18038473936247 863.4901574740943 826.9481728169235 946.4084738562776 736.2615496391669 544.0676614073523 408.5706783739091 929.6509603326284 747.0336077634757 445.39500578682964 30.104082957079335 846.8066063806851 79.44395528503412 911.398118797185 19.79373130923834 708.2313585399477 947.0673194028802 384.5715311841067 329.90892645450174 688.1802267598393 335.98209799211145 866.5893366243571 834.4193926266086 542.4004541737214 654.1237279599915 1.4637917205246875 899.9992281011163 945.0746007280288 288.95658654650083 838.8184336350537 654.0873348704445 680.0108039726365 833.7841235394144 787.5146677247379 514.6559067461627 874.0304618328447 195.06360687629498 609.6144238158308 533.6491055678772 210.6478672000731 63.9555659030705 830.1548655797374 670.9739999948113 336.6041949068802 760.8933666897026 506.8254037919978 467.36897230385244 805.7288009156894 379.09802499570367 871.7282364982603 438.5245930632216 792.2651991673312 156.3779813181556 924.3332295499105 431.6397678505351 57.50048613354053 267.2981572346773 360.4843305737707 975.5873736455964 201.75328436462715 453.32186891359305 860.738822073116 176.4775454014501 364.00089560071933 371.2679536008262 954.208857086728 642.2929227022462 860.2982525432433 62.07624277172563 27.280975992188594 506.86552897520164 963.5206803052353 655.6559753958753 913.4842164147861 792.9538584661656 368.77977904155614 705.7490793824517 145.93534090591487 149.13982774651535 926.544313985821 505.7912995774754 238.36085604124858 950.717524456068 868.6795457198392 857.3402361072945 217.2818093472808 247.5493500668544 48.66072911734931 521.1421661250829 624.1863871395403 78.97169517988655 512.2134891571691 960.1957020160768 411.7101070154479 226.52935412784382
	`)
	require.NoError(t, err)
	defer suite.Close()

	err = suite.Run() // just load data 
	require.NoError(t, err)

	expr, err := parser.ParseExpr(`sum by(instance) (quantile_over_time(0.99, http_requests[200s]))`)
	require.NoError(t, err)

	
	

	tests := []struct {
		name   string
		expr   parser.Expr
		labels labels.Labels
	}{
		{
			name:   "quantile_over_time:recording_test",
			expr:   &parser.NumberLiteral{Val: 1},
			labels: labels.Labels{},
		},
	}

	for _, test := range tests {
		test.expr = expr
		rule := NewRecordingRule(test.name, test.expr, test.labels)
		for i := 1; i < 207; i++ { // recording rule evaluated per second
			evalTime := time.Unix((int64)(i), 0)
			start_time := time.Now()
			result, _ := rule.Eval(suite.Context(), evalTime, EngineQueryFunc(suite.QueryEngine(), suite.Storage()), nil, 0) // no limit here
			elapsed := time.Since(start_time)
			t.Log("Eval time used is:", elapsed)
			t.Log("Eval result is:\n", result)
		}
		
	}
}



/*

func TestRecordingRuleHTMLSnippet(t *testing.T) {
	expr, err := parser.ParseExpr(`foo{html="<b>BOLD<b>"}`)
	require.NoError(t, err)
	rule := NewRecordingRule("testrule", expr, labels.FromStrings("html", "<b>BOLD</b>"))

	const want = template.HTML(`record: <a href="/test/prefix/graph?g0.expr=testrule&g0.tab=1">testrule</a>
expr: <a href="/test/prefix/graph?g0.expr=foo%7Bhtml%3D%22%3Cb%3EBOLD%3Cb%3E%22%7D&g0.tab=1">foo{html=&#34;&lt;b&gt;BOLD&lt;b&gt;&#34;}</a>
labels:
  html: '&lt;b&gt;BOLD&lt;/b&gt;'
`)

	got := rule.HTMLSnippet("/test/prefix")
	require.Equal(t, want, got, "incorrect HTML snippet; want:\n\n%s\n\ngot:\n\n%s", want, got)
}

// TestRuleEvalDuplicate tests for duplicate labels in recorded metrics, see #5529.
func TestRuleEvalDuplicate(t *testing.T) {
	storage := teststorage.New(t)
	defer storage.Close()

	opts := promql.EngineOpts{
		Logger:     nil,
		Reg:        nil,
		MaxSamples: 10,
		Timeout:    10 * time.Second,
	}

	engine := promql.NewEngine(opts)
	ctx, cancelCtx := context.WithCancel(context.Background())
	defer cancelCtx()

	now := time.Now()

	expr, _ := parser.ParseExpr(`vector(0) or label_replace(vector(0),"test","x","","")`)
	rule := NewRecordingRule("foo", expr, labels.FromStrings("test", "test"))
	_, err := rule.Eval(ctx, now, EngineQueryFunc(engine, storage), nil, 0)
	require.Error(t, err)
	require.EqualError(t, err, "vector contains metrics with the same labelset after applying rule labels")
}

func TestRecordingRuleLimit(t *testing.T) {
	suite, err := promql.NewTest(t, `
		load 1m
			metric{label="1"} 1
			metric{label="2"} 1
	`)
	require.NoError(t, err)
	defer suite.Close()

	require.NoError(t, suite.Run())

	tests := []struct {
		limit int
		err   string
	}{
		{
			limit: 0,
		},
		{
			limit: -1,
		},
		{
			limit: 2,
		},
		{
			limit: 1,
			err:   "exceeded limit of 1 with 2 series",
		},
	}

	expr, _ := parser.ParseExpr(`metric > 0`)
	rule := NewRecordingRule(
		"foo",
		expr,
		labels.FromStrings("test", "test"),
	)

	evalTime := time.Unix(0, 0)

	for _, test := range tests {
		_, err := rule.Eval(suite.Context(), evalTime, EngineQueryFunc(suite.QueryEngine(), suite.Storage()), nil, test.limit)
		if err != nil {
			require.EqualError(t, err, test.err)
		} else if test.err != "" {
			t.Errorf("Expected error %s, got none", test.err)
		}
	}
}

*/